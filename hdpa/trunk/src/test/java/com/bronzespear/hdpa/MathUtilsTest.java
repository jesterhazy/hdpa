package com.bronzespear.hdpa;

import static com.bronzespear.hdpa.MathUtils.*;

import java.util.Arrays;

import org.junit.Assert;
import org.junit.Test;

public class MathUtilsTest {

	@Test
	public void testNormalize() {
		double[] input = {1.0d, 1.0d};
		double[] expected = {0.5d, 0.5d};
		
		normalize(input);
		double delta = 0.00001d;
		Assert.assertArrayEquals(expected, input, delta);
	}
	
	@Test
	public void testNormalizeLargeInput() {
		double[] input = { -2552955.6051839665d, -8897.432073529393d,
				-2421.210180712683d, -8295.242685529694d, -10899.9000761509d,
				-6186.939450305636d, -7531.286440196861d, -6724.425850169134d,
				-4613.625095828444d, -4232.15610282924d, -5171.478668881608d,
				-4930.479001924947d, -7302.114390889489d, -5947.318103283815d,
				-14158.867568001384d, -7061.233116125517d, -8882.09526269193d,
				-16272.33196079946d, -3443.0076710050575d,
				-3947.6535933721584d, -2100.217162040645d, -4908.081287028613d,
				-6527.321251169162d, -4998.608259996561d, -4923.726445671268d,
				-4315.60531610948d, -4864.37757282451d, -4246.860252417396d,
				-7582.489899066886d, -11569.227641183601d, -8662.117130252078d,
				-6740.525109519425d, -64143.75929867588d, -3730.869432066105d,
				-10751.731919132924d, -5308.646170619928d, -4547.185886899642d,
				-3966.2488290117076d, -8043.600784509564d, -7659.813850190495d,
				-6027.43630173829d, -5185.521699763882d, -7031.924946755011d,
				-37541.84981898281d, -5141.095371407636d, -3394.651179459321d,
				-8059.312707184141d, -4456.642519089031d, -7971.801455285791d,
				-8434.278093142084d, -2150.0749816919706d,
				-6883.0191410660045d, -3053.924604980143d, -6346.978757951861d,
				-2847.2319657587423d, -9523.751965970305d, -3224.426128130324d,
				-5186.952227664735d, -6868.295434160621d, -4936.121386606659d,
				-6751.877839187626d, -4617.608075784929d, -4819.96385194096d,
				-8433.669527467888d, -6726.144193029339d, -5665.913603070411d,
				-5476.156867880287d, -14985.081919973674d,
				-4630.9086553189045d, -7618.70702715348d, -15224.371736072644d,
				-5701.987187613213d, -6029.815571806769d, -3949.588764032721d,
				-10070.116214010513d, -4864.820316333215d, -8767.869614302086d,
				-3639.640691863596d, -3829.2491728463115d, -5525.611734466169d,
				-6744.029460286854d, -8673.90964976267d, -39108.49806741193d,
				-8805.949755746318d, -8798.057110848578d, -5846.506962999281d,
				-6640.006051370416d, -7885.063237068082d, -8105.880303943298d,
				-11170.205350844339d, -8072.665686321928d,
				-11102.612890438148d, -5537.119511271775d, -6796.253782274244d,
				-7471.65921483712d, -5494.908859694762d, -9203.065549486228d,
				-3888.220982131434d, -135181.65805596643d, -7403.359368848619d,
				-6211.666251146154d, -5964.55657524185d, -7180.62542341319d, 
				-5518.014054695707d, -4744.351449332054d, -6557.425595372361d,
				-5863.406019818172d, -4242.835590167658d, -27441.741143091902d,
				-6966.31808045683d, -6933.541386967129d, -4555.737684318435d,
				-3362.928620378304d, -10405.586318125845d, -4303.680982407377d,
				-3855.084359966472d, -8354.837035296052d, -6639.563808645735d,
				-3680.2307209545497d, -5217.106852219689d, -3986.892765466527d,
				-6556.9067904202475d, -7285.455506937646d, -7910.141846102437d,
				-4590.993317424448d, -7462.012844340507d, -41960.009697461224d,
				-4328.004020846028d, -4328.089608423956d, -6373.9884705890445d,
				-10844.387209007427d, -3666.2693242835917d,
				-6371.162938338014d, -5392.997984709173d, -12562.21166349058d,
				-3272.973759251578d, -3702.835344785015d, -6478.135054545491d,
				-3949.7848816001647d, -7352.592990835946d, -8286.919013144072d,
				-27116.719718648263d, -9385.696075702814d, -4782.70490153127d,
				-8716.51590228599d, -3559.1712359655808d, -5054.993325526184d,
				-15376.902269557479d, -5221.205182969987d, -5670.302884135073d,
				-11735.531756073296d, -19015.003662999632d, -3780.45322729513d,
				-16810.956349802913d, -5594.973504355566d, -3325.944192543345d,
				-3675.6555388128463d, -4222.719468249663d, -4884.057967764168d,
				-5259.091273289798d, -6751.972361388421d, -4761.4060418618965d,
				-4424.609867962372d, -6012.419459910253d, -7347.284088893241d,
				-6086.607026481001d, -5374.453173894999d, -5093.827629524401d,
				-5338.296883135022d, -6143.788757558791d, -8209.005186674289d,
				-8981.218131750364d, -6304.906167638104d, -7548.830327083051d,
				-5056.475099452718d, -65317.536070749884d, -4307.213565070715d,
				-4588.960350640776d, -8237.137333041308d, -3214.99633459725d,
				-3923.0154334967206d, -4152.8669693711645d,
				-5430.312904017669d, -62751.22525679929d, -5664.389907911714d,
				-10626.637837631852d, -6672.97616627614d, -6787.635059472061d,
				-9824.716515519302d, -4774.13777601004d, -3666.655216872783d,
				-3013.499865365362d, -9143.019040090836d, -9412.333753460769d,
				-8478.426428712526d, -5529.2457381079685d,
				-5772.9029741725935d, -4443.671421727893d, -4586.784805160332d,
				-11262.009778791422d, -4778.344153222505d, -40106.03698135123d,
				-5150.773037885074d, -5823.917764164434d, -6603.690680484653d,
				-4526.211856330268d, -3651.574256703183d, -6224.343364011242d,
				-39893.13002579654d, -3202.1563867150253d, -4625.458336698069d,
				-10126.569232474461d, -16907.70865548338d,
				-7580.2286526718235d, -5280.339526010684d, -5176.294585243574d,
				-6091.8662969015d, -17182.795631079334d, -3458.391300053784d,
				-5777.188969452946d, -4466.3069326879495d,
				-29116.652084574864d, -10830.339800510988d,
				-7988.657441819447d, -4796.407183265175d, -5305.028106678104d,
				-18748.311489353233d, -6197.950769369147d, -5471.385802895955d,
				-5395.186197299624d, -6242.086995797105d, -4126.6381737982265d,
				-7108.503155397821d, -6100.359886391112d, -22615.54102038664d,
				-2838.5554160463744d, -3413.6491261926144d, -7404.65798734749d,
				-5591.461839759999d, -8749.600250971042d, -4680.248804005948d,
				-6957.288589644304d, -4446.733463804214d, -6383.515854318386d,
				-4300.797276557327d, -6296.929929139433d, -4941.29534198619d,
				-11337.798298431664d, -4698.145291932366d, -6654.762234359725d,
				-5106.7654983461125d, -4516.387884331042d, -8042.611094935659d,
				-5082.199859649511d, -4323.247250911409d, -9138.349676035614d,
				-14261.041670654166d, -4752.783692198691d, -7762.026996664903d,
				-3188.9255764193567d, -26076.388438736096d,
				-11784.394745593912d, -4285.5338723029345d,
				-43426.93377411821d, -8479.695570335796d, -4551.245300063659d,
				-4249.714058443908d, -4472.795393882617d, -5910.114896809237d,
				-4431.006847294633d, -4498.288539600137d, -4948.064239938039d,
				-5143.218652043119d, -6895.556818986093d, -6674.541704636434d,
				-3924.0881690697315d, -14987.22629962902d,
				-5333.1804315655445d, -5870.122759888309d, -6110.392154921781d,
				-6927.342622371847d, -10299.843905776519d, -4385.561801444603d,
				-5384.0882643885725d, -6439.335164715381d, -5908.528805347546d,
				-6969.2717651458115d, -5001.793487255355d, -9062.661834618413d,
				-14069.28873570367d, -4369.719019466648d, -6480.141917801973d,
				-14504.357040134346d, -7015.061570499274d,
				-4356.1247643199285d, -16999.57855920829d, -6489.523126117331d,
				-6131.679960395636d, -5187.340621699424d, -7268.331544459624 };
		
		normalize(input);
		
		double sum = sum(input);
		Assert.assertTrue(approximateEquals(1.0d, sum));
		
		for (int i = 0; i < input.length; i++) {
			Assert.assertTrue(i + " was " + input[i], input[i] >= 0.0d);
		}
		
		System.out.println(Arrays.toString(input));
	}
	
	@Test
	public void testNormalizeUnderflow() {
		double[] input = new double[5000];
		for (int i = 0; i < input.length; i++) {
			input[i] = 1.0d / 5000;
		}
		
		input[0] = 200.0d;
		
		normalize(input);

		Assert.assertEquals(0.04d, input[0], MathUtils.EPSILON);
		for (int i = 1; i < input.length; i++) {
			Assert.assertTrue(approximateEquals(0.0002d, input[i]));
		}
	}
}
